
/* -*- c++ -*-
Cornell box scene
Matheus de Carvalho Souza */
{
entities = {
    back = VisibleEntity {
        frame =
        /* The back wall is centered back and halfway b/w the ceiling
        and floor, rotated at rool by 90 degrees */
        CFrame::fromXYZYPRDegrees(0, 1.8, -1.75, 0, 90, 0);

        model = "whiteWall";
    };

    camera = Camera {
        depthOfFieldSettings = DepthOfFieldSettings {
            enabled = true;
            farBlurRadiusFraction = 0.005;
            farBlurryPlaneZ = -100;
            farSharpPlaneZ = -40;
            focusPlaneZ = -10;
            lensRadius = 0.01;
            model = "NONE";
            nearBlurRadiusFraction = 0.015;
            nearBlurryPlaneZ = -0.25;
            nearSharpPlaneZ = -1;
        };

        filmSettings = FilmSettings {
            antialiasingEnabled = true;
            antialiasingFilterRadius = 0;
            antialiasingHighQuality = true;
            bloomRadiusFraction = 0.009;
            bloomStrength = 0.2;
            debugZoom = 1;
            effectsEnabled = true;
            gamma = 2.2;
            sensitivity = 1;
            toneCurve = Spline {
                control = (0, 0.1, 0.2, 0.5, 1);
                extrapolationMode = "LINEAR";
                finalInterval = -1;
                interpolationMode = "CUBIC";
                time = (0, 0.1, 0.2, 0.5, 1);
            };

            vignetteBottomStrength = 0.05;
            vignetteSizeFraction = 0.17;
            vignetteTopStrength = 0.5;
        };

        frame = CFrame::fromXYZYPRDegrees(0, 1.9, 5);
        motionBlurSettings = MotionBlurSettings {
            cameraMotionInfluence = 0.5;
            enabled = false;
            exposureFraction = 0.75;
            maxBlurDiameterFraction = 0.1;
            numSamples = 27;
        };

        projection = Projection {
            farPlaneZ = -150;
            fovDegrees = 90;
            fovDirection = "HORIZONTAL";
            nearPlaneZ = -0.15;
            pixelOffset = Vector2(0, 0);
        };

        visualizationScale = 1;
    };

    ceiling = VisibleEntity {
        frame = CFrame::fromXYZYPRDegrees(0, 3.6, 0);
        model = "whiteWall";
    };

    cube0 = VisibleEntity {
        frame = CFrame::fromXYZYPRDegrees(0.470365, 0.5, 0.607708, -18.0376);
        model = "blueCubeModel";
    };

    cube1 = VisibleEntity {
        articulatedModelPose = ArticulatedModel::Pose {
            materialTable = {
                mesh = UniversalMaterial::Specification {
                    glossy = Color4(0.25, 0.25, 0.25, glossyExponent(2048));
                    lambertian = Color3(0.95, 0.05, 0.05);
                };

            };

        };

        canChange = false;
        frame = CFrame::fromXYZYPRDegrees(0.542421, 2.15797, -0.69156, 17.4113);
        model = "cubeModel";
    };

    cube2 = VisibleEntity {
        frame = CFrame::fromXYZYPRDegrees(-0.653312, 1, -0.316581, 17.4113);
        model = "anotherCubeModel";
    };

    floor = VisibleEntity {
        frame =
        /* Floor is at the center and bottom of the image */
        CFrame::fromXYZYPRDegrees(0, 0, 0);

        model = "whiteWall";
    };

    gWall = VisibleEntity {
        frame = CFrame::fromXYZYPRDegrees(1.75, 1.8, 0);
        model = "greenWall";
    };

    rWall = VisibleEntity {
        frame = CFrame::fromXYZYPRDegrees(-1.75, 1.8, 0);
        model = "redWall";
    };

    skybox = Skybox {
        texture = 0.5;
    };

    sun = Light {
      attenuation = (0.0001, 0, 1);
        bulbPower = Power3(60);
        canChange = false;
        castsShadows = true;
        enabled = true;
        extent = Vector2(0.75, 0.75);
        frame = CFrame::fromXYZYPRDegrees(0, 1.92, 0, 0, -90, 0);
        producesDirectIllumination = true;
        producesIndirectIllumination = true;
        shadowMapSize = Vector2int16(1024, 1024);
        spotHalfAngleDegrees = 45;
        spotSquare = true;
        type = "SPOT";
    };
   
    light2 = Light {
        attenuation = (0.0001, 0, 1);
        bulbPower = Power3(60);
        canChange = false;
        castsShadows = true;
        enabled = true;
        extent = Vector2(0.75, 0.75);
        frame = CFrame::fromXYZYPRDegrees(0, 1.92, 0, 0, 0, 0);
        producesDirectIllumination = true;
        producesIndirectIllumination = true;
        shadowMapSize = Vector2int16(1024, 1024);
        spotHalfAngleDegrees = 45;
        spotSquare = true;
        type = "SPOT";
    };

};

lightingEnvironment = LightingEnvironment{
    ambientOcclusionSettings = AmbientOcclusionSettings {
        bias = 0.023;
        blurRadius = 4;
        blurStepSize = 2;
        depthPeelSeparationHint = 0.01;
        edgeSharpness = 1;
        enabled = true;
        highQualityBlur = true;
        intensity = 1;
        monotonicallyDecreasingBilateralWeights = false;
        numSamples = 19;
        packBlurKeys = false;
        radius = 0.75;
        temporalFilterSettings = TemporalFilter::Settings {
            falloffEndDistance = 0.07;
            falloffStartDistance = 0.05;
            hysteresis = 0;
        };

        temporallyVarySamples = false;
        useDepthPeelBuffer = false;
        useNormalBuffer = true;
        useNormalsInBlur = true;
        zStorage = "HALF";
    };

};

models = {
    anotherCubeModel = ArticulatedModel::Specification {
        filename = "model/crate/crate.obj";
        preprocess = {
            setMaterial(all(), Color3(1, 0, 0));
            transformGeometry(all(), Matrix4::scale(0.5, 0.5, 0.5)) };

    };

    blueCubeModel = ArticulatedModel::Specification {
        filename = "model/crate/crate.obj";
        preprocess = {
            setMaterial(all(), Color3(0, 1, 1));
            transformGeometry(all(), Matrix4::scale(0.5, 0.5, 0.5)) };

    };

    cubeModel = ArticulatedModel::Specification {
        filename = "model/crate/crate.obj";
        preprocess = {
            setMaterial(all(), Color3(1, 0, 1));
            transformGeometry(all(), Matrix4::scale(0.5, 0.5, 0.5)) };

    };

    greenWall =
        /* Wall models */
        ArticulatedModel::Specification {
            filename = "model/crate/crate.obj";
            preprocess = {
                setMaterial(all(), Color3(0, 1, 0));
                transformGeometry(all(), Matrix4::scale(0.1, 3.6, 3.6)) };

        };

        redWall = ArticulatedModel::Specification {
            filename = "model/crate/crate.obj";
            preprocess = {
                setMaterial(all(), Color3(1, 0, 0));
                transformGeometry(all(), Matrix4::scale(0.1, 3.6, 3.6)) };

        };

        whiteWall = ArticulatedModel::Specification {
            filename = "model/crate/crate.obj";
            preprocess = {
                setMaterial(all(), Color3(1, 1, 1));
                transformGeometry(all(), Matrix4::scale(3.6, 0.1, 3.6)) };

        };

};

name = "Demo Box";
}